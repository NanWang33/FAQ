79. Word Search
Medium
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

【思路】
典型DFS，mark visited by replacing original char into special char *

【代码】
class Solution {
        public boolean exist(char[][] board, String word) {
            if (word == null || word.length() == 0) return false;
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    if(dfs(board, word, 0, i, j)) return true;
                }
            }
            return false;
        }
        
        private boolean dfs(char[][] board, String word, int depth, int x, int y) {
            if (depth == word.length()) {
                return true;
            }
            
            if (x < 0 || y < 0 || x >= board.length || y >= board[0].length) return false;
            char cur = board[x][y];
            if (cur != word.charAt(depth)) return false;
            
            board[x][y] = '*';
            boolean res = (dfs(board, word, depth+1, x-1, y) ||
               dfs(board, word, depth+1, x+1, y) ||
               dfs(board, word, depth+1, x, y-1) ||
               dfs(board, word, depth+1, x, y+1));
            board[x][y] = cur;
            return res;
        }
}

【分析】O(mn 4 ^ word_length)
**********************************************************************************************
212. Word Search II
Hard

Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
 

Note:

All inputs are consist of lowercase letters a-z.
The values of words are distinct.

【思路】每一轮search Word，建立新的visited[][]
【代码】
public List<String> findWords(char[][] board, String[] words) {
	List<String> res = new ArrayList<>();

	for (String word : words) {
		boolean[][] visited = new boolean[board.length][board[0].length];
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				if (board[i][j] == word.charAt(0) && exist(board, visited, i, j, word, 0)) {
					if (!res.contains(word))
						res.add(word);
				}
			}
		}
	}
	return res;
}

private boolean exist(char[][] board, boolean[][] visited, int i, int j, String s, int index) {
	if (index == s.length())
		return true;
	//false case
	if (i < 0 || i >= board.length || j < 0 || 
		j >= board[0].length || visited[i][j] || board[i][j] != s.charAt(index)) {
		return false;
	}

	visited[i][j] = true;
	if (exist(board, visited, i + 1, j, s, index + 1) ||
		exist(board, visited, i - 1, j, s, index + 1) ||
		exist(board, visited, i, j + 1, s, index + 1) ||
		exist(board, visited, i, j - 1, s, index + 1)) {
		return true;
	}
	visited[i][j] = false;

	return false;
}

【思路】利用Trie
【代码】
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
    List<String> res = new ArrayList<>();
    TrieNode root = buildTrie(words);
    for (int i = 0; i < board.length; i++) {
        for (int j = 0; j < board[0].length; j++) {
            dfs (board, i, j, root, res);
        }
    }
    return res;
}

public void dfs(char[][] board, int i, int j, TrieNode p, List<String> res) {
    char c = board[i][j];
    if (c == '#' || p.next[c - 'a'] == null) return;
    p = p.next[c - 'a'];
    if (p.word != null) {   // found one
        res.add(p.word);
        p.word = null;     // de-duplicate
    }

    board[i][j] = '#';
    if (i > 0) dfs(board, i - 1, j ,p, res); 
    if (j > 0) dfs(board, i, j - 1, p, res);
    if (i < board.length - 1) dfs(board, i + 1, j, p, res); 
    if (j < board[0].length - 1) dfs(board, i, j + 1, p, res); 
    board[i][j] = c;
}

public TrieNode buildTrie(String[] words) {
    TrieNode root = new TrieNode();
    for (String w : words) {
        TrieNode p = root;
        for (char c : w.toCharArray()) {
            int i = c - 'a';
            if (p.next[i] == null) p.next[i] = new TrieNode();
            p = p.next[i];
       }
       p.word = w;
    }
    return root;
}

class TrieNode {
    TrieNode[] next = new TrieNode[26];
    String word;
}
}
【分析】O(mn 4 ^ avr_word_length)
